# -*- coding: utf-8 -*-
"""Stock_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/173Z80pOU5JvQCY_7JqaHxY9lnRVMMKu8
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pandas_datareader.data as data
import yfinance
import datetime



start = datetime.datetime(2010, 1, 1)
end = datetime.datetime(2019, 12, 31)
df = yfinance.download('AAPL', start=start, end=end)
df.head()

df.tail()

df = df.reset_index()
df.head()

df = df.drop(['Date','Adj Close'],axis=1)
df.head()

plt.plot(df.Close)

df

ma100 = df.Close.rolling(100).mean()
ma100

plt.figure(figsize = (12,6))
plt.plot(df.Close)
plt.plot(ma100,'red')

ma200 = df.Close.rolling(200).mean()
ma200

plt.figure(figsize = (12,6))
plt.plot(df.Close)
plt.plot(ma100,'red')
plt.plot(ma200,'g')

data_training = pd.DataFrame(df['Close'][0:int(len(df)*0.70)])

data_testing = pd.DataFrame(df['Close'][int(len(df)*0.70):int(len(df))])

print(data_training.shape)
print(data_testing.shape)

data_training.head()

data_testing.head()

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))

data_training_array = scaler.fit_transform(data_training)
data_training_array

x_train = []
y_train = []

for i in range(100,data_training_array.shape[0]):
  x_train.append(data_training_array[i-100:i])
  y_train.append(data_training_array[i,0])
x_train,y_train = np.array(x_train),np.array(y_train)

from keras.layers import Dense,Dropout,LSTM
from keras.models import Sequential

model = Sequential()
model.add(LSTM(units = 50,activation='relu',return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(Dropout(0.2))

model.add(LSTM(units = 60,activation='relu',return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(units = 80,activation='relu',return_sequences=True))
model.add(Dropout(0.4))

model.add(LSTM(units = 120,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(units = 1))

model.summary()

model.compile(optimizer='adam',loss = 'mean_squared_error')
model.fit(x_train,y_train,epochs = 50)

model.save('keras_model.h5')

data_testing.head()

past_100_days = data_training.tail(100)

final_df = past_100_days.append(data_testing,ignore_index=True)

final_df.head()

input_data = scaler.fit_transform(final_df)
input_data

input_data.shape

x_test = []
y_test = []
for i in range(100,input_data.shape[0]):
  x_test.append(input_data[i-100:i])
  y_test.append(input_data[i,0])

x_test,y_test = np.array(x_test),np.array(y_test)
print(x_test.shape)
print(y_test.shape)

y_pridicted = model.predict(x_test)
y_pridicted.shape

y_test

y_pridicted

scaler.scale_

scale_factor = 1/0.02123255
y_pridicted = y_pridicted*scale_factor
y_test = y_test*scale_factor

plt.figure(figsize=(12,6))
plt.plot(y_test,'b',label='Original_Price')
plt.plot(y_pridicted,'g',label='Predicted_Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pandas_datareader as data
import yfinance
from keras.models import load_model

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import numpy as np
# import pandas as pd
# import matplotlib.pyplot as plt
# import pandas_datareader as data
# import yfinance
# from keras.models import load_model
# 
# start = '2010-01-01'
# end = '2019-12-31'
# st.title("Stock Trend Prediction")
# user_input = st.text_input('Enter Stock Ticker','AAPL')
# df = yfinance.download(user_input, start=start, end=end)
# 
# st.subheader('Data From 2010 - 2019')
# st.write(df.describe())
# 
# st.subheader('Closing Price vs Time Chart')
# fig = plt.figure(figsize=(12,6))
# plt.plot(df.Close)
# st.pyplot(fig)

